version: '3.8'

services:
  kafka:
    image: confluentinc/cp-kafka:8.0.0
    hostname: kafka
    container_name: teuthis-kafka
    user: root
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9101:9101"
    environment:
      # KRaft Configuration
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      
      # Cluster Configuration
      CLUSTER_ID: 'Tk1VdE9EVkJOVGN3TlRKRU5EUXk='
      
      # Storage Configuration 
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      
      # Replication and Partitions
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      
      # Topic Configuration
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      
      # Performance Configuration
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      
      # JMX Configuration (apenas JMX nativo, sem exporter por enquanto)
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      
      # Configurações de log
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.server=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      
      # KRaft específico
      KAFKA_KRAFT_MODE: 'true'
      
      # Configurações de timeout
      KAFKA_CONTROLLER_SOCKET_TIMEOUT_MS: 30000
      KAFKA_REQUEST_TIMEOUT_MS: 30000
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - teuthis-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 60s
    command: >
      bash -c "
        echo '🚀 Starting Kafka KRaft setup...'
        
        # Limpar diretório de logs se existir
        if [ -d '/var/lib/kafka/data' ]; then
          echo '🧹 Cleaning existing log directory...'
          rm -rf /var/lib/kafka/data/*
        fi
        
        # Criar diretório com permissões corretas
        mkdir -p /var/lib/kafka/data
        chown -R appuser:appuser /var/lib/kafka/data
        
        # Formatar storage do KRaft
        echo '⚡ Formatting KRaft storage...'
        kafka-storage format \
          --config /etc/kafka/kafka.properties \
          --cluster-id Tk1VdE9EVkJOVGN3TlRKRU5EUXk=
        
        echo '✅ KRaft storage formatted successfully'
        
        # Iniciar Kafka
        echo '🎯 Starting Kafka server...'
        exec /etc/confluent/docker/run
      "

  schema-registry:
    image: confluentinc/cp-schema-registry:8.0.0
    hostname: schema-registry
    container_name: teuthis-schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: backward
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: WARN
    networks:
      - teuthis-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 8
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    container_name: teuthis-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: teuthis-kraft-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
      AUTH_TYPE: "DISABLED"
    networks:
      - teuthis-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-init:
    image: confluentinc/cp-kafka:8.0.0
    container_name: teuthis-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - teuthis-network
    command: |
      bash -c "
        echo '📝 Waiting for Kafka to be fully ready...'
        sleep 15
        
        echo '🏷️ Creating Kafka topics...'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic test-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic logs
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic metrics
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic health
        
        echo '✅ Created topics:'
        kafka-topics --list --bootstrap-server kafka:29092
        
        echo '📊 Topic details:'
        kafka-topics --describe --bootstrap-server kafka:29092
        
        echo '🎉 Kafka topics initialization completed!'
      "

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: teuthis-kafka-exporter
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=teuthis-kafka:29092'
      - '--web.listen-address=:9308'
      - '--log.level=info'
    networks:
      - teuthis-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9308/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  teuthis-app:
    build:
      context: .
      dockerfile: docker\Dockerfile
    container_name: teuthis-application
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SERVER_PORT: 8080
      NETTY_BOSS_THREADS: 1
      NETTY_WORKER_THREADS: 0
      KAFKA_THREAD_POOL_SIZE: 10
      # Configuração de threshold de recursos (0.95 = 95%)
      RESOURCES_THRESHOLD: 0.95
      RETRY_AFTER_SECONDS: 60
      # Desabilitar compressão Snappy temporariamente (Alpine Linux issue)
      KAFKA_COMPRESSION_TYPE: none
      # Descomente para usar configuração de desenvolvimento (threshold 70%)
      # SPRING_PROFILES_ACTIVE: dev
      JAVA_OPTS: >-
        -Xmx1g
        -Xms256m
        -XX:+UseG1GC
        -XX:+UseContainerSupport
    networks:
      - teuthis-network
    healthcheck:
      test: ["CMD", "netstat", "-tlnp", "|", "grep", ":8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: teuthis-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts:/etc/prometheus/alerts
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.notification-queue-capacity=10000'
    networks:
      - teuthis-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.0
    container_name: teuthis-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: teuthis123
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - teuthis-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  kafka-data:
    driver: local
  maven-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  teuthis-network:
    driver: bridge
    name: teuthis-network